[{"/Users/apple/Desktop/rhombit/taskmanager/src/App.js":"1","/Users/apple/Desktop/rhombit/taskmanager/src/index.js":"2","/Users/apple/Desktop/rhombit/taskmanager/src/utils/JobContext.js":"3","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/TableBodyCustom.js":"4","/Users/apple/Desktop/rhombit/taskmanager/src/utils/CustomerContext.js":"5","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/TableHeadCustom.js":"6","/Users/apple/Desktop/rhombit/taskmanager/src/utils/UserContext.js":"7","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Index.js":"8","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/index.js":"9","/Users/apple/Desktop/rhombit/taskmanager/src/component/Landing/index.js":"10","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/index.js":"11","/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/CreateJob.js":"12","/Users/apple/Desktop/rhombit/taskmanager/src/reportWebVitals.js":"13","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/index.js":"14","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/index.js":"15","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/JobData.js":"16","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/JobTask.js":"17","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/Task/ShowTaskModal.js":"18","/Users/apple/Desktop/rhombit/taskmanager/src/utils/ChatContext.js":"19","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/index.js":"20","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/ContextMenu.js":"21","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/ChatItem.js":"22","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/Task/CreateTaskModal.js":"23"},{"size":825,"mtime":1610375006904,"results":"24","hashOfConfig":"25"},{"size":500,"mtime":1610327325669,"results":"26","hashOfConfig":"25"},{"size":3148,"mtime":1610429312321,"results":"27","hashOfConfig":"25"},{"size":3376,"mtime":1610371958745,"results":"28","hashOfConfig":"25"},{"size":664,"mtime":1610358342169,"results":"29","hashOfConfig":"25"},{"size":2588,"mtime":1610358435936,"results":"30","hashOfConfig":"25"},{"size":565,"mtime":1610358338120,"results":"31","hashOfConfig":"25"},{"size":2993,"mtime":1610360554400,"results":"32","hashOfConfig":"25"},{"size":1448,"mtime":1610370183514,"results":"33","hashOfConfig":"25"},{"size":1699,"mtime":1610360825904,"results":"34","hashOfConfig":"25"},{"size":3435,"mtime":1610401575540,"results":"35","hashOfConfig":"25"},{"size":6215,"mtime":1610414014941,"results":"36","hashOfConfig":"25"},{"size":362,"mtime":1610327325669,"results":"37","hashOfConfig":"25"},{"size":2306,"mtime":1610428848053,"results":"38","hashOfConfig":"25"},{"size":960,"mtime":1610423117770,"results":"39","hashOfConfig":"25"},{"size":2949,"mtime":1610402375778,"results":"40","hashOfConfig":"25"},{"size":1504,"mtime":1610423061497,"results":"41","hashOfConfig":"25"},{"size":2056,"mtime":1610427633836,"results":"42","hashOfConfig":"25"},{"size":1248,"mtime":1610412990810,"results":"43","hashOfConfig":"25"},{"size":3067,"mtime":1610428813068,"results":"44","hashOfConfig":"25"},{"size":2704,"mtime":1610421578222,"results":"45","hashOfConfig":"25"},{"size":1299,"mtime":1610421564724,"results":"46","hashOfConfig":"25"},{"size":3896,"mtime":1610429340490,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tqhmwy",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/apple/Desktop/rhombit/taskmanager/src/App.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/utils/JobContext.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/TableBodyCustom.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/utils/CustomerContext.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/TableHeadCustom.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/utils/UserContext.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Index.js",["96","97","98"],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/Table/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Landing/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Lists/CreateJob.js",["99"],"import {\n  Button,\n  Collapse,\n  fade,\n  IconButton,\n  makeStyles,\n  MenuItem,\n  Paper,\n  Select,\n  TableCell,\n  TableContainer,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport { Clear } from \"@material-ui/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst useStyle = makeStyles((theme) => ({\n  createBtnContainer: {\n    textAlign: \"right\",\n    width: \"100%\",\n  },\n  createBtn: {\n    marginTop: theme.spacing(2),\n    background: \"#1976d2\",\n    color: \"#fff\",\n    \"&:hover\": {\n      background: fade(\"#1976d2\", 0.25),\n    },\n  },\n  btnConfirm: {\n    background: \"#5aac44\",\n    color: \"#fff\",\n    \"&:hover\": {\n      background: fade(\"#5aac44\", 0.25),\n    },\n  },\n  createBtnDisable: {\n    color: \"#fff\",\n    background: fade(\"#1976d2\", 0.25),\n  },\n  confirm: {\n    margin: theme.spacing(0, 1, 1, 1),\n  },\n  createTable: {\n    width: \"100%\",\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n}));\nexport default function CreateJob({ user, setJobs }) {\n  const classes = useStyle();\n  const [open, setOpen] = useState(false);\n  const [job, setJob] = useState({\n    id: uuidv4(),\n    jobname: null,\n    customer: user && user.name ? user.name : null,\n    endDate: \"2020-01-11\",\n    startDate: \"2020-01-11\",\n    status: \"Pending\",\n    location: user && user.location ? user.location : null,\n  });\n\n  const handleInput = (evt) => {\n    const name = evt.target.name;\n    const newValue = evt.target.value;\n    setJob({ ...job, [name]: newValue });\n  };\n  useEffect(() => {\n    if (user && user.name) {\n      setJob({ ...job, customer: user.name });\n    }\n    if (user && user.location && user.name) {\n      setJob({ ...job, location: user.location, customer: user.name });\n    }\n  }, [user]);\n\n  const handleCreateJob = (e) => {\n    e.preventDefault();\n    const convertStartDate = new Date(job.startDate);\n    const convertEndDate = new Date(job.endDate);\n\n    if (job.jobname && job.customer && job.location) {\n      const jobFinal = {\n        id: job.id,\n        jobname: job.jobname,\n        customer: job.customer,\n        endDate: convertEndDate,\n        startDate: convertStartDate,\n        status: job.status,\n        location: job.location,\n      };\n\n      setJobs((prevJobs) => [...prevJobs, jobFinal]);\n      setOpen(false);\n    }\n  };\n  return (\n    <div className={classes.createBtnContainer}>\n      <Collapse in={open}>\n        <div>\n          <form>\n            <TableContainer component={Paper}>\n              <TableRow className={classes.createTable}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <TextField\n                    multiline\n                    variant=\"filled\"\n                    name=\"jobname\"\n                    label=\"Job Name\"\n                    value={job.jobname}\n                    onChange={handleInput}\n                    placeholder=\"Job Name\"\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  {user && user.name ? (\n                    user.name\n                  ) : (\n                    <TextField\n                      multiline\n                      variant=\"filled\"\n                      name=\"customer\"\n                      label=\"Customer\"\n                      value={job.customer}\n                      onChange={handleInput}\n                      placeholder=\"Customer\"\n                    />\n                  )}\n                </TableCell>\n                <TableCell align=\"right\">\n                  {user && user.location ? (\n                    user.location\n                  ) : (\n                    <TextField\n                      multiline\n                      variant=\"filled\"\n                      name=\"location\"\n                      label=\"Location\"\n                      value={job.location}\n                      onChange={handleInput}\n                      placeholder=\"Location\"\n                    />\n                  )}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    id=\"date\"\n                    name=\"startDate\"\n                    label=\"Start Date\"\n                    type=\"date\"\n                    value={job.startDate}\n                    onChange={handleInput}\n                    className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    id=\"date\"\n                    name=\"endDate\"\n                    label=\"End Date\"\n                    type=\"date\"\n                    onChange={handleInput}\n                    value={job.endDate}\n                    className={classes.textField}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Select\n                    value={job.status}\n                    name=\"status\"\n                    onChange={handleInput}\n                  >\n                    <MenuItem value={\"Pending\"}>Pending</MenuItem>\n                    <MenuItem value={\"Ongoing\"}>Ongoing</MenuItem>\n                    <MenuItem value={\"Closed\"}>Closed</MenuItem>\n                  </Select>\n                </TableCell>\n              </TableRow>\n            </TableContainer>\n          </form>\n        </div>\n\n        <div className={classes.confirm}>\n          <Button className={classes.btnConfirm} onClick={handleCreateJob}>\n            Add Job\n          </Button>\n          <IconButton onClick={() => setOpen(false)}>\n            <Clear />\n          </IconButton>\n        </div>\n      </Collapse>\n      <Collapse in={!open}>\n        {user ? (\n          <Button className={classes.createBtn} onClick={() => setOpen(!open)}>\n            Create\n          </Button>\n        ) : (\n          <>\n            <Button className={classes.createBtnDisable}>Create</Button>\n            <p>Select a user to create a job</p>\n          </>\n        )}\n      </Collapse>\n    </div>\n  );\n}\n","/Users/apple/Desktop/rhombit/taskmanager/src/reportWebVitals.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/index.js",["100"],"import {\n  AppBar,\n  Grid,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport React, { useContext, useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { ChatContext } from \"../../utils/ChatContext\";\nimport { JobContext } from \"../../utils/JobContext\";\nimport JobChat from \"./JobChat\";\nimport JobInfo from \"./JobInfo\";\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: \"center\",\n  },\n  jobInfo: {\n    border: \"2px solid black\",\n  },\n  disableLink: {\n    color: \"inherit\",\n  },\n  gridContainer: {\n    height: \"90vh\",\n  },\n  infoContainer: {\n    height: \"92vh\",\n    borderLeft: \"1px solid black\",\n    overflow: \"scroll\",\n  },\n  navbar: {\n    zIndex: \"10vh\",\n  },\n}));\nexport default function Job() {\n  const [jobs, setJobs] = useContext(JobContext);\n  const [chats, setChats] = useContext(ChatContext);\n  const classes = useStyles();\n  const { id } = useParams();\n\n  let jobData = jobs.find((x) => x.id === id);\n  useEffect(() => {\n    jobData = jobs.find((x) => x.id === id);\n  }, [jobs]);\n  return (\n    <div>\n      <AppBar className={classes.navbar} position=\"static\">\n        <Toolbar>\n          <Link className={classes.disableLink} to=\"/lists\">\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <ArrowBackIcon fontSize=\"large\" />\n            </IconButton>\n          </Link>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            JOB: {jobData.jobname}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid className={classes.gridContainer} container>\n        <Grid item xs={12} sm={7}>\n          <JobChat\n            chats={chats}\n            jobId={id}\n            jobs={jobs}\n            setChats={setChats}\n            setJobs={setJobs}\n            jobData={jobData}\n          />\n        </Grid>\n        <Grid item xs={12} sm={5} padding={0} className={classes.infoContainer}>\n          <JobInfo jobData={jobData} setJobs={setJobs} jobId={id} jobs={jobs} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/JobData.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/JobTask.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/Task/ShowTaskModal.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/utils/ChatContext.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/index.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/ContextMenu.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobChat/ChatItem.js",[],"/Users/apple/Desktop/rhombit/taskmanager/src/component/Job/JobInfo/Task/CreateTaskModal.js",["101"],{"ruleId":"102","severity":1,"message":"103","line":39,"column":16,"nodeType":"104","messageId":"105","endLine":39,"endColumn":23},{"ruleId":"102","severity":1,"message":"106","line":42,"column":10,"nodeType":"104","messageId":"105","endLine":42,"endColumn":23},{"ruleId":"102","severity":1,"message":"107","line":42,"column":25,"nodeType":"104","messageId":"105","endLine":42,"endColumn":41},{"ruleId":"108","severity":1,"message":"109","line":79,"column":6,"nodeType":"110","endLine":79,"endColumn":12,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":51,"column":15,"nodeType":"113","endLine":51,"endColumn":44},{"ruleId":"102","severity":1,"message":"114","line":40,"column":11,"nodeType":"104","messageId":"105","endLine":40,"endColumn":13},"no-unused-vars","'setJobs' is assigned a value but never used.","Identifier","unusedVar","'userCreateJob' is assigned a value but never used.","'setUserCreateJob' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'job'. Either include it or remove the dependency array. You can also do a functional update 'setJob(j => ...)' if you only need 'job' in the 'setJob' call.","ArrayExpression",["115"],"Assignments to the 'jobData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'id' is assigned a value but never used.",{"desc":"116","fix":"117"},"Update the dependencies array to be: [job, user]",{"range":"118","text":"119"},[1785,1791],"[job, user]"]